generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(uuid())
  firstName               String?                @db.VarChar(100)
  lastName                String?                @db.VarChar(100)
  name                    String?
  email                   String?                @unique
  phone                   String?                @unique @db.VarChar(15)
  password                String?
  image                   String?
  role                    UserRole               @default(USER)
  emailVerified           DateTime?
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId Int?
  otp                     Int?
  otpExpires              DateTime?
  loginType               LoginType?             @default(PHONE)
  lastLogin               DateTime?
  signUpSuccess           Boolean                @default(false)
  gender                  Gender?                @default(MALE)
  age                     Int?
  dob                     String?
  location                String?
  country                 String?
  language                String?
  timeZone                String?
  pinCode                 Int?
  source                  String?
  accounts                Account[]
  reports                 Report[]
  emails                  Json[]
  appointments            Appointment[]
  userProgress            UserProgress?
  blogs                   Blog[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confirmations")
}

model Permission {
  id        Int      @id @default(autoincrement())
  role      UserRole
  resource  Resource
  canCreate Boolean  @default(false)
  canRead   Boolean  @default(false)
  canUpdate Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([role, resource])
}

model Blog {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  content     String  @db.Text
  image       String?
  published   Boolean @default(false)
  authorId    String
  category    String  @db.VarChar(100)
  subCategory String? @db.VarChar(100)
  isActive    Boolean @default(true)

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([authorId])
  @@map("blogs")
}

model Report {
  id             Int       @id @default(autoincrement())
  userId         String
  startTime      DateTime
  endTime        DateTime
  sessionId      String
  recommendation Json
  questions      Json[]
  deletedAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map("reports")
}

model Question {
  id           Int          @id @default(autoincrement())
  text         String       @db.Text
  sequence     Int
  questionType QuestionType @default(SINGLE_SELECT)
  required     Boolean      @default(true)
  isActive     Boolean      @default(true)
  isDeleted    Boolean      @default(false)
  options      Option[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt

  @@index([questionType])
  @@map("questions")
}

model Option {
  id         Int     @id @default(autoincrement())
  questionId Int
  text       String  @db.Text
  sequence   Int
  isActive   Boolean @default(true)
  isDeleted  Boolean @default(false)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([questionId])
  @@map("options")
}

model TimeSlot {
  id            String        @id @default(cuid())
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  totalSeats    Int
  bookedSeats   Int           @default(0)
  originalPrice Float         @default(600)
  price         Float         @default(500)
  label         String?
  isActive      Boolean       @default(true)
  appointments  Appointment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([date, startTime, endTime])
}

model Appointment {
  id          String            @id @default(cuid())
  userId      String
  timeSlotId  String
  status      AppointmentStatus @default(CONFIRMED)
  user        User              @relation(fields: [userId], references: [id])
  timeSlot    TimeSlot          @relation(fields: [timeSlotId], references: [id])
  transaction Transaction?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CanceledAppointment {
  id              String   @id @default(cuid())
  userId          String
  timeSlotId      String
  canceledAt      DateTime @default(now())
  reason          String?
  phoneNumber     String
  appointmentDate DateTime
}

model Transaction {
  id            String        @id @default(cuid())
  appointmentId String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?       @unique

  appointment Appointment @relation(fields: [appointmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id                 String      @id @default(cuid())
  user               User        @relation(fields: [userId], references: [id])
  userId             String      @unique
  lastStep           BookingStep
  selectedDate       DateTime?
  selectedTimeSlotId String?
  updatedAt          DateTime    @updatedAt
}

model ContactSubmission {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model NewsLetter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leads {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Resource {
  BLOGS
  REPORTS
  QUESTIONS
  USERS
  CONTACT_SUBMISSIONS
  NEWSLETTER
  LEADS
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  EDITOR
}

enum QuestionType {
  SINGLE_SELECT
  MULTIPLE_SELECT
  TEXT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LoginType {
  GOOGLE
  PHONE
  EMAIL
}

enum AppointmentStatus {
  CONFIRMED
  COMPLETED
  NO_SHOW
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BookingStep {
  PHONE_VERIFICATION
  DATE_SELECTION
  TIME_SELECTION
  PAYMENT
}
